<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--
        spring希望管理所有的业务逻辑组件，除了控制层交给spring mvc管理以外都要管理。
    -->
    <context:component-scan base-package="com.eh.eden.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--spring用来控制业务逻辑，数据源、事务控制、aop等-->
    <!--引入数据库配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${url}"/>
        <property name="driverClass" value="${driver}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!--spring事务管理器,管理数据源的提交和关闭-->
    <bean id = "dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启基于注解的事务-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!--
    整合mybatis,目的
    1. spring管理所有组件，包括mapper的实现类，之后service调用Dao
    可以使用@Autowired 自动注入，不用再从SqlSession工厂获取连接，再从连接得到代理类
    2. spring用来管理事务，spring声明式事务
    -->
    <!--
    原先在mybatis-config中定义的属性，都挪到SqlSessionFactoryBean下进行定义
    SqlSessionFactoryBean创建出SqlSessionFactory对象，不用再拿到mybatis-config流，再从流buildSqlSessionFactory
    -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--configLocation指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
    </bean>

    <!--
        扫描所有mapper接口的实现，让这些mapper能够自动注入
    -->
    <mybatis-spring:scan base-package="com.eh.eden.ssm.orm.dao"/>
</beans>